// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchange.proto

package x

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Order_OrderSide int32

const (
	Order_Buy  Order_OrderSide = 0
	Order_Sell Order_OrderSide = 1
)

var Order_OrderSide_name = map[int32]string{
	0: "Buy",
	1: "Sell",
}

var Order_OrderSide_value = map[string]int32{
	"Buy":  0,
	"Sell": 1,
}

func (x Order_OrderSide) String() string {
	return proto.EnumName(Order_OrderSide_name, int32(x))
}

func (Order_OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{5, 0}
}

type Order_TimeInForce int32

const (
	Order_GTC Order_TimeInForce = 0
	Order_GTT Order_TimeInForce = 1
	Order_IOC Order_TimeInForce = 2
	Order_FOK Order_TimeInForce = 3
)

var Order_TimeInForce_name = map[int32]string{
	0: "GTC",
	1: "GTT",
	2: "IOC",
	3: "FOK",
}

var Order_TimeInForce_value = map[string]int32{
	"GTC": 0,
	"GTT": 1,
	"IOC": 2,
	"FOK": 3,
}

func (x Order_TimeInForce) String() string {
	return proto.EnumName(Order_TimeInForce_name, int32(x))
}

func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{5, 1}
}

type Order_OrderType int32

const (
	Order_LIMIT             Order_OrderType = 0
	Order_MARKET            Order_OrderType = 1
	Order_STOP_LOSS         Order_OrderType = 2
	Order_STOP_LOSS_LIMIT   Order_OrderType = 3
	Order_TAKE_PROFIT       Order_OrderType = 4
	Order_TAKE_PROFIT_LIMIT Order_OrderType = 5
	Order_LIMIT_MAKER       Order_OrderType = 6
)

var Order_OrderType_name = map[int32]string{
	0: "LIMIT",
	1: "MARKET",
	2: "STOP_LOSS",
	3: "STOP_LOSS_LIMIT",
	4: "TAKE_PROFIT",
	5: "TAKE_PROFIT_LIMIT",
	6: "LIMIT_MAKER",
}

var Order_OrderType_value = map[string]int32{
	"LIMIT":             0,
	"MARKET":            1,
	"STOP_LOSS":         2,
	"STOP_LOSS_LIMIT":   3,
	"TAKE_PROFIT":       4,
	"TAKE_PROFIT_LIMIT": 5,
	"LIMIT_MAKER":       6,
}

func (x Order_OrderType) String() string {
	return proto.EnumName(Order_OrderType_name, int32(x))
}

func (Order_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{5, 2}
}

type Trade_Maker int32

const (
	Trade_Unknown Trade_Maker = 0
	Trade_Buyer   Trade_Maker = 1
	Trade_Seller  Trade_Maker = 2
)

var Trade_Maker_name = map[int32]string{
	0: "Unknown",
	1: "Buyer",
	2: "Seller",
}

var Trade_Maker_value = map[string]int32{
	"Unknown": 0,
	"Buyer":   1,
	"Seller":  2,
}

func (x Trade_Maker) String() string {
	return proto.EnumName(Trade_Maker_name, int32(x))
}

func (Trade_Maker) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{9, 0}
}

type Frequency struct {
	Nanos                int64    `protobuf:"varint,1,opt,name=nanos,proto3" json:"nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Frequency) Reset()         { *m = Frequency{} }
func (m *Frequency) String() string { return proto.CompactTextString(m) }
func (*Frequency) ProtoMessage()    {}
func (*Frequency) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0}
}

func (m *Frequency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Frequency.Unmarshal(m, b)
}
func (m *Frequency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Frequency.Marshal(b, m, deterministic)
}
func (m *Frequency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frequency.Merge(m, src)
}
func (m *Frequency) XXX_Size() int {
	return xxx_messageInfo_Frequency.Size(m)
}
func (m *Frequency) XXX_DiscardUnknown() {
	xxx_messageInfo_Frequency.DiscardUnknown(m)
}

var xxx_messageInfo_Frequency proto.InternalMessageInfo

func (m *Frequency) GetNanos() int64 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type Balance struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Available            float64  `protobuf:"fixed64,3,opt,name=available,proto3" json:"available,omitempty"`
	Locked               float64  `protobuf:"fixed64,5,opt,name=locked,proto3" json:"locked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{1}
}

func (m *Balance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balance.Unmarshal(m, b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return xxx_messageInfo_Balance.Size(m)
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Balance) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Balance) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Balance) GetLocked() float64 {
	if m != nil {
		return m.Locked
	}
	return 0
}

type AccountQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountQuery) Reset()         { *m = AccountQuery{} }
func (m *AccountQuery) String() string { return proto.CompactTextString(m) }
func (*AccountQuery) ProtoMessage()    {}
func (*AccountQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{2}
}

func (m *AccountQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountQuery.Unmarshal(m, b)
}
func (m *AccountQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountQuery.Marshal(b, m, deterministic)
}
func (m *AccountQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountQuery.Merge(m, src)
}
func (m *AccountQuery) XXX_Size() int {
	return xxx_messageInfo_AccountQuery.Size(m)
}
func (m *AccountQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountQuery.DiscardUnknown(m)
}

var xxx_messageInfo_AccountQuery proto.InternalMessageInfo

type StreamAccountQuery struct {
	Query                *AccountQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Frequency            *Frequency    `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StreamAccountQuery) Reset()         { *m = StreamAccountQuery{} }
func (m *StreamAccountQuery) String() string { return proto.CompactTextString(m) }
func (*StreamAccountQuery) ProtoMessage()    {}
func (*StreamAccountQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{3}
}

func (m *StreamAccountQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamAccountQuery.Unmarshal(m, b)
}
func (m *StreamAccountQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamAccountQuery.Marshal(b, m, deterministic)
}
func (m *StreamAccountQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamAccountQuery.Merge(m, src)
}
func (m *StreamAccountQuery) XXX_Size() int {
	return xxx_messageInfo_StreamAccountQuery.Size(m)
}
func (m *StreamAccountQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamAccountQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StreamAccountQuery proto.InternalMessageInfo

func (m *StreamAccountQuery) GetQuery() *AccountQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamAccountQuery) GetFrequency() *Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

type Account struct {
	Balances             map[string]*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tradeable            bool                `protobuf:"varint,2,opt,name=tradeable,proto3" json:"tradeable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{4}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetBalances() map[string]*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *Account) GetTradeable() bool {
	if m != nil {
		return m.Tradeable
	}
	return false
}

type Order struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price                float64           `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             float64           `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Side                 Order_OrderSide   `protobuf:"varint,4,opt,name=side,proto3,enum=x.Order_OrderSide" json:"side,omitempty"`
	Pair                 string            `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	TimeInForce          Order_TimeInForce `protobuf:"varint,6,opt,name=timeInForce,proto3,enum=x.Order_TimeInForce" json:"timeInForce,omitempty"`
	OrderType            Order_OrderType   `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=x.Order_OrderType" json:"order_type,omitempty"`
	CancelAfter          uint32            `protobuf:"varint,8,opt,name=cancelAfter,proto3" json:"cancelAfter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{5}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetSide() Order_OrderSide {
	if m != nil {
		return m.Side
	}
	return Order_Buy
}

func (m *Order) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Order) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_GTC
}

func (m *Order) GetOrderType() Order_OrderType {
	if m != nil {
		return m.OrderType
	}
	return Order_LIMIT
}

func (m *Order) GetCancelAfter() uint32 {
	if m != nil {
		return m.CancelAfter
	}
	return 0
}

type OrderStatus struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Trades               []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderStatus) Reset()         { *m = OrderStatus{} }
func (m *OrderStatus) String() string { return proto.CompactTextString(m) }
func (*OrderStatus) ProtoMessage()    {}
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{6}
}

func (m *OrderStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderStatus.Unmarshal(m, b)
}
func (m *OrderStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderStatus.Marshal(b, m, deterministic)
}
func (m *OrderStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderStatus.Merge(m, src)
}
func (m *OrderStatus) XXX_Size() int {
	return xxx_messageInfo_OrderStatus.Size(m)
}
func (m *OrderStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OrderStatus proto.InternalMessageInfo

func (m *OrderStatus) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderStatus) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

func (m *OrderStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type TradesQuery struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesQuery) Reset()         { *m = TradesQuery{} }
func (m *TradesQuery) String() string { return proto.CompactTextString(m) }
func (*TradesQuery) ProtoMessage()    {}
func (*TradesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{7}
}

func (m *TradesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesQuery.Unmarshal(m, b)
}
func (m *TradesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesQuery.Marshal(b, m, deterministic)
}
func (m *TradesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesQuery.Merge(m, src)
}
func (m *TradesQuery) XXX_Size() int {
	return xxx_messageInfo_TradesQuery.Size(m)
}
func (m *TradesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TradesQuery proto.InternalMessageInfo

func (m *TradesQuery) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *TradesQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type StreamTradesQuery struct {
	Query                *TradesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Frequency            *Frequency   `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StreamTradesQuery) Reset()         { *m = StreamTradesQuery{} }
func (m *StreamTradesQuery) String() string { return proto.CompactTextString(m) }
func (*StreamTradesQuery) ProtoMessage()    {}
func (*StreamTradesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{8}
}

func (m *StreamTradesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamTradesQuery.Unmarshal(m, b)
}
func (m *StreamTradesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamTradesQuery.Marshal(b, m, deterministic)
}
func (m *StreamTradesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTradesQuery.Merge(m, src)
}
func (m *StreamTradesQuery) XXX_Size() int {
	return xxx_messageInfo_StreamTradesQuery.Size(m)
}
func (m *StreamTradesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTradesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTradesQuery proto.InternalMessageInfo

func (m *StreamTradesQuery) GetQuery() *TradesQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamTradesQuery) GetFrequency() *Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

type Trade struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Maker                Trade_Maker `protobuf:"varint,2,opt,name=maker,proto3,enum=x.Trade_Maker" json:"maker,omitempty"`
	Price                float64     `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity             float64     `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	CreatedAt            *Timestamp  `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{9}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trade) GetMaker() Trade_Maker {
	if m != nil {
		return m.Maker
	}
	return Trade_Unknown
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Trade) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Trades struct {
	Trades               []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trades) Reset()         { *m = Trades{} }
func (m *Trades) String() string { return proto.CompactTextString(m) }
func (*Trades) ProtoMessage()    {}
func (*Trades) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{10}
}

func (m *Trades) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trades.Unmarshal(m, b)
}
func (m *Trades) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trades.Marshal(b, m, deterministic)
}
func (m *Trades) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trades.Merge(m, src)
}
func (m *Trades) XXX_Size() int {
	return xxx_messageInfo_Trades.Size(m)
}
func (m *Trades) XXX_DiscardUnknown() {
	xxx_messageInfo_Trades.DiscardUnknown(m)
}

var xxx_messageInfo_Trades proto.InternalMessageInfo

func (m *Trades) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type QuoteQuery struct {
	Pair                 string   `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteQuery) Reset()         { *m = QuoteQuery{} }
func (m *QuoteQuery) String() string { return proto.CompactTextString(m) }
func (*QuoteQuery) ProtoMessage()    {}
func (*QuoteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{11}
}

func (m *QuoteQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteQuery.Unmarshal(m, b)
}
func (m *QuoteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteQuery.Marshal(b, m, deterministic)
}
func (m *QuoteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteQuery.Merge(m, src)
}
func (m *QuoteQuery) XXX_Size() int {
	return xxx_messageInfo_QuoteQuery.Size(m)
}
func (m *QuoteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteQuery proto.InternalMessageInfo

func (m *QuoteQuery) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

type StreamQuoteQuery struct {
	Query                *QuoteQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Frequency            *Frequency  `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StreamQuoteQuery) Reset()         { *m = StreamQuoteQuery{} }
func (m *StreamQuoteQuery) String() string { return proto.CompactTextString(m) }
func (*StreamQuoteQuery) ProtoMessage()    {}
func (*StreamQuoteQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{12}
}

func (m *StreamQuoteQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamQuoteQuery.Unmarshal(m, b)
}
func (m *StreamQuoteQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamQuoteQuery.Marshal(b, m, deterministic)
}
func (m *StreamQuoteQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamQuoteQuery.Merge(m, src)
}
func (m *StreamQuoteQuery) XXX_Size() int {
	return xxx_messageInfo_StreamQuoteQuery.Size(m)
}
func (m *StreamQuoteQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamQuoteQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StreamQuoteQuery proto.InternalMessageInfo

func (m *StreamQuoteQuery) GetQuery() *QuoteQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamQuoteQuery) GetFrequency() *Frequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

type Quote struct {
	AskPrice             float64    `protobuf:"fixed64,1,opt,name=askPrice,proto3" json:"askPrice,omitempty"`
	AskVolume            float64    `protobuf:"fixed64,2,opt,name=askVolume,proto3" json:"askVolume,omitempty"`
	BidPrice             float64    `protobuf:"fixed64,3,opt,name=bidPrice,proto3" json:"bidPrice,omitempty"`
	BidVolume            float64    `protobuf:"fixed64,4,opt,name=bidVolume,proto3" json:"bidVolume,omitempty"`
	CreatedAt            *Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Quote) Reset()         { *m = Quote{} }
func (m *Quote) String() string { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()    {}
func (*Quote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{13}
}

func (m *Quote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quote.Unmarshal(m, b)
}
func (m *Quote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quote.Marshal(b, m, deterministic)
}
func (m *Quote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quote.Merge(m, src)
}
func (m *Quote) XXX_Size() int {
	return xxx_messageInfo_Quote.Size(m)
}
func (m *Quote) XXX_DiscardUnknown() {
	xxx_messageInfo_Quote.DiscardUnknown(m)
}

var xxx_messageInfo_Quote proto.InternalMessageInfo

func (m *Quote) GetAskPrice() float64 {
	if m != nil {
		return m.AskPrice
	}
	return 0
}

func (m *Quote) GetAskVolume() float64 {
	if m != nil {
		return m.AskVolume
	}
	return 0
}

func (m *Quote) GetBidPrice() float64 {
	if m != nil {
		return m.BidPrice
	}
	return 0
}

func (m *Quote) GetBidVolume() float64 {
	if m != nil {
		return m.BidVolume
	}
	return 0
}

func (m *Quote) GetCreatedAt() *Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Timestamp struct {
	Seconds              int64    `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos                int64    `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{14}
}

func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int64 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterEnum("x.Order_OrderSide", Order_OrderSide_name, Order_OrderSide_value)
	proto.RegisterEnum("x.Order_TimeInForce", Order_TimeInForce_name, Order_TimeInForce_value)
	proto.RegisterEnum("x.Order_OrderType", Order_OrderType_name, Order_OrderType_value)
	proto.RegisterEnum("x.Trade_Maker", Trade_Maker_name, Trade_Maker_value)
	proto.RegisterType((*Frequency)(nil), "x.Frequency")
	proto.RegisterType((*Balance)(nil), "x.Balance")
	proto.RegisterType((*AccountQuery)(nil), "x.AccountQuery")
	proto.RegisterType((*StreamAccountQuery)(nil), "x.StreamAccountQuery")
	proto.RegisterType((*Account)(nil), "x.Account")
	proto.RegisterMapType((map[string]*Balance)(nil), "x.Account.BalancesEntry")
	proto.RegisterType((*Order)(nil), "x.Order")
	proto.RegisterType((*OrderStatus)(nil), "x.OrderStatus")
	proto.RegisterType((*TradesQuery)(nil), "x.TradesQuery")
	proto.RegisterType((*StreamTradesQuery)(nil), "x.StreamTradesQuery")
	proto.RegisterType((*Trade)(nil), "x.Trade")
	proto.RegisterType((*Trades)(nil), "x.Trades")
	proto.RegisterType((*QuoteQuery)(nil), "x.QuoteQuery")
	proto.RegisterType((*StreamQuoteQuery)(nil), "x.StreamQuoteQuery")
	proto.RegisterType((*Quote)(nil), "x.Quote")
	proto.RegisterType((*Timestamp)(nil), "x.Timestamp")
}

func init() { proto.RegisterFile("exchange.proto", fileDescriptor_e0328a4f16f87ea1) }

var fileDescriptor_e0328a4f16f87ea1 = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xee, 0xd8, 0x71, 0x62, 0x1f, 0x6f, 0x53, 0xef, 0x6c, 0x17, 0x59, 0x11, 0x42, 0xc1, 0x5b,
	0x56, 0xa1, 0x48, 0xa6, 0x2d, 0x2b, 0x40, 0x70, 0x95, 0xae, 0xda, 0x2a, 0xea, 0x56, 0xc9, 0x4e,
	0x02, 0xb7, 0x91, 0x63, 0xcf, 0x2e, 0x56, 0x1c, 0x3b, 0xb5, 0xc7, 0x4b, 0x72, 0xc5, 0xdb, 0xc0,
	0xab, 0xf0, 0x24, 0x5c, 0xf2, 0x0c, 0x68, 0x66, 0xfc, 0x97, 0x6e, 0x7a, 0xc1, 0xde, 0x44, 0xe7,
	0xfb, 0xce, 0xcf, 0x9c, 0x39, 0x3f, 0x9e, 0x40, 0x97, 0x6e, 0xfc, 0xdf, 0xbc, 0xf8, 0x3d, 0x75,
	0xd7, 0x69, 0xc2, 0x12, 0x8c, 0x36, 0xce, 0x97, 0x60, 0x5c, 0xa7, 0xf4, 0x3e, 0xa7, 0xb1, 0xbf,
	0xc5, 0xc7, 0xa0, 0xc5, 0x5e, 0x9c, 0x64, 0x36, 0xea, 0xa3, 0x81, 0x4a, 0x24, 0x70, 0x28, 0x74,
	0x2e, 0xbd, 0xc8, 0x8b, 0x7d, 0x8a, 0xbb, 0xa0, 0x84, 0x81, 0xd0, 0x1a, 0x44, 0x09, 0x03, 0xee,
	0xe0, 0x65, 0x19, 0x65, 0xb6, 0x22, 0x28, 0x09, 0xf0, 0xe7, 0x60, 0x78, 0x1f, 0xbc, 0x30, 0xf2,
	0x16, 0x11, 0xb5, 0xd5, 0x3e, 0x1a, 0x20, 0x52, 0x13, 0xf8, 0x33, 0x68, 0x47, 0x89, 0xbf, 0xa4,
	0x81, 0xad, 0x09, 0x55, 0x81, 0x9c, 0x2e, 0x3c, 0x19, 0xfa, 0x7e, 0x92, 0xc7, 0xec, 0x6d, 0x4e,
	0xd3, 0xad, 0xf3, 0x1e, 0xf0, 0x94, 0xa5, 0xd4, 0x5b, 0x35, 0x59, 0xfc, 0x15, 0x68, 0xf7, 0x5c,
	0x10, 0x49, 0x98, 0x17, 0x47, 0xee, 0xc6, 0x6d, 0xea, 0x89, 0xd4, 0xe2, 0x53, 0x30, 0xde, 0x95,
	0xd7, 0x12, 0xc9, 0x99, 0x17, 0x4f, 0xdc, 0x8d, 0x5b, 0x5d, 0x95, 0xd4, 0x6a, 0xe7, 0x4f, 0x04,
	0x9d, 0x22, 0x06, 0x7e, 0x05, 0xfa, 0x42, 0xde, 0x95, 0x17, 0x41, 0x1d, 0x98, 0x17, 0x76, 0x7d,
	0x82, 0x5b, 0x94, 0x21, 0xbb, 0x8a, 0x59, 0xba, 0x25, 0x95, 0x25, 0xbf, 0x30, 0x4b, 0xbd, 0x80,
	0x8a, 0x0b, 0xf3, 0xd3, 0x74, 0x52, 0x13, 0xbd, 0x1b, 0x38, 0xdc, 0x71, 0xc4, 0x16, 0xa8, 0x4b,
	0xba, 0x2d, 0xca, 0xc8, 0x45, 0xdc, 0x07, 0xed, 0x83, 0x17, 0xe5, 0xb4, 0x48, 0x15, 0xdc, 0x4d,
	0x79, 0x16, 0x91, 0x8a, 0x9f, 0x94, 0x1f, 0x91, 0xf3, 0x8f, 0x0a, 0xda, 0x38, 0x0d, 0x68, 0xba,
	0xaf, 0x0f, 0xeb, 0x34, 0xf4, 0xa5, 0x3f, 0x22, 0x12, 0xe0, 0x1e, 0xe8, 0xf7, 0xb9, 0x17, 0xb3,
	0x90, 0x6d, 0x8b, 0x36, 0x54, 0x18, 0xbf, 0x84, 0x56, 0x16, 0x06, 0xd4, 0x6e, 0xf5, 0xd1, 0xa0,
	0x7b, 0x81, 0xdd, 0x8d, 0x2b, 0x22, 0xcb, 0xdf, 0x69, 0x18, 0x50, 0x22, 0xf4, 0x18, 0x43, 0x6b,
	0xed, 0x85, 0xa9, 0xe8, 0x95, 0x41, 0x84, 0x8c, 0xbf, 0x07, 0x93, 0x85, 0x2b, 0x3a, 0x8a, 0xaf,
	0x93, 0xd4, 0xa7, 0x76, 0x5b, 0x84, 0x38, 0xae, 0x42, 0xcc, 0x6a, 0x1d, 0x69, 0x1a, 0xe2, 0x73,
	0x80, 0x84, 0x5b, 0xcc, 0xd9, 0x76, 0x4d, 0xed, 0xce, 0xbe, 0x93, 0x67, 0xdb, 0x35, 0x25, 0x46,
	0x52, 0x8a, 0xb8, 0x0f, 0xa6, 0xcf, 0xcb, 0x10, 0x0d, 0xdf, 0x31, 0x9a, 0xda, 0x7a, 0x1f, 0x0d,
	0x0e, 0x49, 0x93, 0x72, 0xbe, 0x00, 0xa3, 0xca, 0x19, 0x77, 0x40, 0xbd, 0xcc, 0xb7, 0xd6, 0x01,
	0xd6, 0xa1, 0x35, 0xa5, 0x51, 0x64, 0x21, 0xe7, 0x1c, 0xcc, 0x46, 0x42, 0xdc, 0xe2, 0x66, 0xf6,
	0xda, 0x3a, 0x90, 0xc2, 0xcc, 0x42, 0x5c, 0x18, 0x8d, 0x5f, 0x5b, 0x0a, 0x17, 0xae, 0xc7, 0xb7,
	0x96, 0xea, 0xfc, 0x51, 0x84, 0x14, 0x19, 0x18, 0xa0, 0xbd, 0x19, 0xdd, 0x8d, 0x66, 0xd6, 0x01,
	0x06, 0x68, 0xdf, 0x0d, 0xc9, 0xed, 0x15, 0xf7, 0x3a, 0x04, 0x63, 0x3a, 0x1b, 0x4f, 0xe6, 0x6f,
	0xc6, 0xd3, 0xa9, 0xa5, 0xe0, 0x67, 0x70, 0x54, 0xc1, 0xb9, 0xb4, 0x57, 0xf1, 0x11, 0x98, 0xb3,
	0xe1, 0xed, 0xd5, 0x7c, 0x42, 0xc6, 0xd7, 0xa3, 0x99, 0xd5, 0xc2, 0xcf, 0xe1, 0x69, 0x83, 0x28,
	0xec, 0x34, 0x6e, 0x27, 0xc4, 0xf9, 0xdd, 0xf0, 0xf6, 0x8a, 0x58, 0x6d, 0xc7, 0x03, 0x53, 0xde,
	0x89, 0x79, 0x2c, 0xcf, 0xb0, 0x0d, 0x1d, 0x51, 0x91, 0x51, 0xd9, 0xf2, 0x12, 0xe2, 0x3e, 0xb4,
	0xc5, 0x9c, 0x65, 0xb6, 0x22, 0x86, 0x55, 0x77, 0x37, 0xee, 0x8c, 0x13, 0xa4, 0xe0, 0xf9, 0xb6,
	0x65, 0x22, 0x8a, 0x98, 0x00, 0x83, 0x14, 0xc8, 0xf9, 0x01, 0x4c, 0x61, 0x98, 0xc9, 0xb5, 0x2a,
	0xdb, 0x8c, 0x1a, 0x6d, 0x3e, 0x06, 0x2d, 0x0a, 0x57, 0xa1, 0x5c, 0x6e, 0x95, 0x48, 0xe0, 0x50,
	0x78, 0x2a, 0xd7, 0xb2, 0xe9, 0x7e, 0xb2, 0xbb, 0x95, 0xdd, 0x32, 0x8d, 0xec, 0x93, 0x97, 0xf2,
	0x6f, 0x04, 0x9a, 0x08, 0xf1, 0xd1, 0xac, 0x9f, 0x80, 0xb6, 0xf2, 0x96, 0x34, 0x15, 0x11, 0xba,
	0xf5, 0x59, 0xee, 0x1d, 0x67, 0x89, 0x54, 0xd6, 0x1b, 0xa1, 0x3e, 0xb6, 0x11, 0xad, 0x07, 0x1b,
	0x71, 0x0a, 0x86, 0x9f, 0x52, 0x8f, 0xd1, 0x60, 0xc8, 0xc4, 0xb8, 0xcb, 0xec, 0xf8, 0xf0, 0x64,
	0xcc, 0x5b, 0xad, 0x49, 0xad, 0x76, 0xbe, 0x01, 0x4d, 0x9c, 0x86, 0x4d, 0xe8, 0xfc, 0x12, 0x2f,
	0xe3, 0xe4, 0xf7, 0xd8, 0x3a, 0xe0, 0xa3, 0x72, 0x99, 0x6f, 0x69, 0x6a, 0x21, 0x3e, 0x2a, 0x7c,
	0xfe, 0x68, 0x6a, 0x29, 0xce, 0x29, 0xb4, 0x65, 0x31, 0x1a, 0xed, 0x42, 0xfb, 0xdb, 0xe5, 0xf4,
	0x01, 0xde, 0xe6, 0x09, 0xa3, 0x8f, 0x76, 0xc5, 0xf1, 0xc1, 0x92, 0xf5, 0x6f, 0xd8, 0xbd, 0xd8,
	0x2d, 0xff, 0xa1, 0xbb, 0x71, 0x6b, 0xed, 0xa7, 0x54, 0xff, 0x2f, 0x04, 0x9a, 0x88, 0xc0, 0x2b,
	0xe6, 0x65, 0xcb, 0x89, 0x28, 0x25, 0x92, 0x15, 0x2b, 0xb1, 0xf8, 0xce, 0x67, 0xcb, 0x5f, 0x93,
	0x28, 0x5f, 0x95, 0x5f, 0x9e, 0x9a, 0xe0, 0x9e, 0x8b, 0x30, 0x98, 0x34, 0x9a, 0x50, 0x61, 0xee,
	0xb9, 0x08, 0x83, 0xc2, 0x53, 0x36, 0xa2, 0x26, 0xfe, 0x57, 0x27, 0x7e, 0x06, 0xa3, 0xe2, 0xf9,
	0xa2, 0x64, 0xd4, 0x4f, 0xe2, 0xa0, 0x7c, 0xc1, 0x4a, 0x58, 0xbf, 0x6c, 0x4a, 0xe3, 0x65, 0xbb,
	0xf8, 0x57, 0x01, 0xfd, 0xaa, 0x78, 0x12, 0xf1, 0xd7, 0x00, 0x37, 0x94, 0x95, 0x0f, 0xc1, 0xc3,
	0x87, 0xa5, 0x07, 0x35, 0x81, 0x5f, 0xc1, 0xe1, 0xce, 0xd3, 0x84, 0x9f, 0xbb, 0x1b, 0xf7, 0xe3,
	0xc7, 0xaa, 0xe9, 0x73, 0x86, 0xf0, 0x09, 0xe8, 0x93, 0x9c, 0xc9, 0x0f, 0xb8, 0x5e, 0x7e, 0xf6,
	0x7a, 0xdd, 0x52, 0x2a, 0x96, 0xfd, 0x14, 0x9e, 0xc8, 0x48, 0x82, 0xcc, 0x1e, 0xb7, 0x1c, 0x20,
	0xfc, 0x12, 0x8c, 0x1b, 0xca, 0x8a, 0xe1, 0x7a, 0xb0, 0x74, 0x3d, 0xa3, 0xc2, 0xf8, 0xbc, 0x8c,
	0x59, 0xe0, 0xe3, 0x2a, 0xdd, 0xfd, 0x0e, 0x67, 0x08, 0xbf, 0x00, 0xfd, 0x86, 0x32, 0x39, 0x03,
	0xbb, 0xf3, 0xd4, 0xd3, 0x4b, 0x88, 0xbf, 0x2d, 0xe3, 0x0a, 0x98, 0xe1, 0x67, 0x55, 0xdc, 0x7d,
	0xe6, 0x67, 0x68, 0xd1, 0x16, 0xff, 0x3b, 0xbe, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x83, 0x0a,
	0x6d, 0x8e, 0x89, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeClient interface {
	GetAccount(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*Account, error)
	StreamAccount(ctx context.Context, in *StreamAccountQuery, opts ...grpc.CallOption) (Exchange_StreamAccountClient, error)
	PutOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderStatus, error)
	StreamOrders(ctx context.Context, opts ...grpc.CallOption) (Exchange_StreamOrdersClient, error)
	GetTrades(ctx context.Context, in *TradesQuery, opts ...grpc.CallOption) (*Trades, error)
	StreamTrades(ctx context.Context, in *StreamTradesQuery, opts ...grpc.CallOption) (Exchange_StreamTradesClient, error)
	GetQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (*Quote, error)
	StreamQuotes(ctx context.Context, in *StreamQuoteQuery, opts ...grpc.CallOption) (Exchange_StreamQuotesClient, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) GetAccount(ctx context.Context, in *AccountQuery, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/x.Exchange/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) StreamAccount(ctx context.Context, in *StreamAccountQuery, opts ...grpc.CallOption) (Exchange_StreamAccountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[0], "/x.Exchange/StreamAccount", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamAccountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_StreamAccountClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type exchangeStreamAccountClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamAccountClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) PutOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderStatus, error) {
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, "/x.Exchange/PutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) StreamOrders(ctx context.Context, opts ...grpc.CallOption) (Exchange_StreamOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[1], "/x.Exchange/StreamOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamOrdersClient{stream}
	return x, nil
}

type Exchange_StreamOrdersClient interface {
	Send(*Order) error
	CloseAndRecv() (*OrderStatus, error)
	grpc.ClientStream
}

type exchangeStreamOrdersClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamOrdersClient) Send(m *Order) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangeStreamOrdersClient) CloseAndRecv() (*OrderStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OrderStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) GetTrades(ctx context.Context, in *TradesQuery, opts ...grpc.CallOption) (*Trades, error) {
	out := new(Trades)
	err := c.cc.Invoke(ctx, "/x.Exchange/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) StreamTrades(ctx context.Context, in *StreamTradesQuery, opts ...grpc.CallOption) (Exchange_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[2], "/x.Exchange/StreamTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_StreamTradesClient interface {
	Recv() (*Trades, error)
	grpc.ClientStream
}

type exchangeStreamTradesClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamTradesClient) Recv() (*Trades, error) {
	m := new(Trades)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) GetQuote(ctx context.Context, in *QuoteQuery, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/x.Exchange/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) StreamQuotes(ctx context.Context, in *StreamQuoteQuery, opts ...grpc.CallOption) (Exchange_StreamQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[3], "/x.Exchange/StreamQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_StreamQuotesClient interface {
	Recv() (*Quote, error)
	grpc.ClientStream
}

type exchangeStreamQuotesClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamQuotesClient) Recv() (*Quote, error) {
	m := new(Quote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeServer is the server API for Exchange service.
type ExchangeServer interface {
	GetAccount(context.Context, *AccountQuery) (*Account, error)
	StreamAccount(*StreamAccountQuery, Exchange_StreamAccountServer) error
	PutOrder(context.Context, *Order) (*OrderStatus, error)
	StreamOrders(Exchange_StreamOrdersServer) error
	GetTrades(context.Context, *TradesQuery) (*Trades, error)
	StreamTrades(*StreamTradesQuery, Exchange_StreamTradesServer) error
	GetQuote(context.Context, *QuoteQuery) (*Quote, error)
	StreamQuotes(*StreamQuoteQuery, Exchange_StreamQuotesServer) error
}

// UnimplementedExchangeServer can be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (*UnimplementedExchangeServer) GetAccount(ctx context.Context, req *AccountQuery) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedExchangeServer) StreamAccount(req *StreamAccountQuery, srv Exchange_StreamAccountServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAccount not implemented")
}
func (*UnimplementedExchangeServer) PutOrder(ctx context.Context, req *Order) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrder not implemented")
}
func (*UnimplementedExchangeServer) StreamOrders(srv Exchange_StreamOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (*UnimplementedExchangeServer) GetTrades(ctx context.Context, req *TradesQuery) (*Trades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (*UnimplementedExchangeServer) StreamTrades(req *StreamTradesQuery, srv Exchange_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (*UnimplementedExchangeServer) GetQuote(ctx context.Context, req *QuoteQuery) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (*UnimplementedExchangeServer) StreamQuotes(req *StreamQuoteQuery, srv Exchange_StreamQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuotes not implemented")
}

func RegisterExchangeServer(s *grpc.Server, srv ExchangeServer) {
	s.RegisterService(&_Exchange_serviceDesc, srv)
}

func _Exchange_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x.Exchange/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetAccount(ctx, req.(*AccountQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_StreamAccount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAccountQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).StreamAccount(m, &exchangeStreamAccountServer{stream})
}

type Exchange_StreamAccountServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type exchangeStreamAccountServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamAccountServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Exchange_PutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x.Exchange/PutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PutOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeServer).StreamOrders(&exchangeStreamOrdersServer{stream})
}

type Exchange_StreamOrdersServer interface {
	SendAndClose(*OrderStatus) error
	Recv() (*Order, error)
	grpc.ServerStream
}

type exchangeStreamOrdersServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamOrdersServer) SendAndClose(m *OrderStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangeStreamOrdersServer) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Exchange_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x.Exchange/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTrades(ctx, req.(*TradesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).StreamTrades(m, &exchangeStreamTradesServer{stream})
}

type Exchange_StreamTradesServer interface {
	Send(*Trades) error
	grpc.ServerStream
}

type exchangeStreamTradesServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamTradesServer) Send(m *Trades) error {
	return x.ServerStream.SendMsg(m)
}

func _Exchange_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x.Exchange/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetQuote(ctx, req.(*QuoteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_StreamQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamQuoteQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).StreamQuotes(m, &exchangeStreamQuotesServer{stream})
}

type Exchange_StreamQuotesServer interface {
	Send(*Quote) error
	grpc.ServerStream
}

type exchangeStreamQuotesServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamQuotesServer) Send(m *Quote) error {
	return x.ServerStream.SendMsg(m)
}

var _Exchange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "x.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Exchange_GetAccount_Handler,
		},
		{
			MethodName: "PutOrder",
			Handler:    _Exchange_PutOrder_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Exchange_GetTrades_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _Exchange_GetQuote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAccount",
			Handler:       _Exchange_StreamAccount_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrders",
			Handler:       _Exchange_StreamOrders_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _Exchange_StreamTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamQuotes",
			Handler:       _Exchange_StreamQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exchange.proto",
}
